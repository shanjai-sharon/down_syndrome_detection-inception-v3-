# -*- coding: utf-8 -*-
"""Transfer Learning Inception V3 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uMsvmWJL0_HQFbqxif1cqHtX3JM5CEln

## Transfer Learning Inception V3 using Keras
"""

from google.colab import drive
drive.mount('/content/drive')

"""Please download the dataset from the below url"""

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

# import the libraries as shown below

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
#from keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
#import matplotlib.pyplot as plt

# re-size all the images to this
IMAGE_SIZE = [224, 224]

train_path = '/content/drive/MyDrive/dom/train'
valid_path = '/content/drive/MyDrive/dom/valid'

# Import the Vgg 16 library as shown below and add preprocessing layer to the front of VGG
# Here we will be using imagenet weights

inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# don't train existing weights
for layer in inception.layers:
    layer.trainable = False

# useful for getting number of output classes
folders = glob('/content/drive/MyDrive/dom/train/*')
print(folders)

# our layers - you can add more if you want
x = Flatten()(inception.output)

prediction = Dense(len(folders), activation='softmax')(x)

# create a model object
model = Model(inputs=inception.input, outputs=prediction)

# view the structure of the model
model.summary()

# tell the model what cost and optimization method to use
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Use the Image Data Generator to import the images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/dom/train',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/dom/valid',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# fit the model
# Run the cell. It will take some time to execute
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=50,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

# prompt: i want to check the runtime is gpu or not

import tensorflow as tf

# Check if a GPU device is available
if tf.config.list_physical_devices('GPU'):
  print('GPU device is available')
else:
  print('GPU device is not available')

import matplotlib.pyplot as plt

# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# save it as a h5 file


from tensorflow.keras.models import load_model

model.save('model_inception.h5')



y_pred = model.predict(test_set)

y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred



from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model=load_model('/content/model_inception.h5')

from PIL import Image

import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# Load the model
model = load_model('/content/drive/MyDrive/dom/model_inception.h5')

# Load the image you want to make a prediction on
img=image.load_img('/content/drive/MyDrive/dom/sample/baby-ultrasound-go-life-medical-free-mobile-ultrasound+(1).webp',target_size=(224,224))



# Convert the image to a numpy array
img_array = image.img_to_array(img)

# Expand dimensions to fit the model's input shape
img_array = np.expand_dims(img_array, axis=0)

# Scale the image pixels by 255
img_array /= 255.

# Make a prediction
predictions = model.predict(img_array)
confidence = np.max(predictions[0])

# Get the index of the highest probability
predicted_index = np.argmax(predictions[0])

print(f"Predicted index: {predicted_index}")

class_names = ['down_syndrom', 'normalchild']  # replace with your class names
predicted_class = class_names[predicted_index]
print(f"Predicted class: {predicted_class} with an confidence of {confidence*100}")
# prompt: write the code to show the img

import matplotlib.pyplot as plt

# Load the image
img = plt.imread('/content/drive/MyDrive/dom/sample/baby-ultrasound-go-life-medical-free-mobile-ultrasound+(1).webp')

# Show the image
plt.imshow(img)
plt.show()





def model_predict(img_path, model):
    print(img_path)
    img = image.load_img(img_path, target_size=(224, 224))

    # Preprocessing the image
    x = image.img_to_array(img)
    # x = np.true_divide(x, 255)
    ## Scaling
    x=x/255
    x = np.expand_dims(x, axis=0)


    # Be careful how your trained model deals with the input
    # otherwise, it won't make correct prediction!
   # x = preprocess_input(x)

    preds = model.predict(x)
    preds=np.argmax(preds, axis=1)
    if preds==0:
        preds="The Disease is Pepper__bell___Bacterial_spot"
    elif preds==1:
        preds="The Disease is Pepper__bell___healthy"

    return preds

img=image.load_img('/content/8.png',target_size=(224,224))

x=image.img_to_array(img)
x

x.shape

x=x/255

import numpy as np
x=np.expand_dims(x,axis=0)
img_data=preprocess_input(x)
img_data.shape

model.predict(img_data)

a=np.argmax(model.predict(img_data), axis=1)

a==1

import tensorflow as tf

tf.__version__

